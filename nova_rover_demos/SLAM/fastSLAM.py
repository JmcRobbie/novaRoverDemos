'''
Implementation of the fast slam algorithm 
For a step by step implementation please check the Jupyter Notebook
NOTE: 

We do not own the entire code 
The code is partly taken from the Python Robotics Repo 
'''

import math

import matplotlib.pyplot as plt
import numpy as np

# Fast SLAM covariance
Q = np.diag([3.0, np.deg2rad(10.0)]) ** 2
R = np.diag([1.0, np.deg2rad(20.0)]) ** 2

#  Simulation parameter
Qsim = np.diag([0.3, np.deg2rad(2.0)]) ** 2
Rsim = np.diag([0.5, np.deg2rad(10.0)]) ** 2
OFFSET_YAWRATE_NOISE = 0.01

DT = 0.1  # time tick [s]
SIM_TIME = 50.0  # simulation time [s]
MAX_RANGE = 20.0  # maximum observation range
M_DIST_TH = 2.0  # Threshold of Mahalanobis distance for data association.
STATE_SIZE = 3  # State size [x,y,yaw]
LM_SIZE = 2  # LM srate size [x,y]
N_PARTICLE = 100  # number of particle
NTH = N_PARTICLE / 1.5  # Number of particle for re-sampling

show_animation = True

'''
A class to represent the samples/particles generated by the motion model 
These particles are a prediction about the rover's posterior 
'''
class Particle:

    def __init__(self, N_LM):
        # * As the number of particles increase their weights decrease
        self.w = 1.0 / N_PARTICLE
        self.x = 0.0
        self.y = 0.0
        self.yaw = 0.0
        # landmark x-y positions
        self.lm = np.zeros((N_LM, LM_SIZE))
        # landmark position covariance
        self.lmP = np.zeros((N_LM * LM_SIZE, LM_SIZE))

'''
Function: fast_slam 
    A function which implements the three steps of the fast slam algorithm

Parameters: 
    Particles - The samples generated by the motion model
    u - Vehicle controls (inputs) without any noise 
    z - Observation made by sensors without any noise 
'''

def fast_slam1(particles, u, z):
    
    # predict the particles 

    # Update particles based on observation 

    # Resample particles with better accuracy 

    return particles

'''
Function: Motion model 
    The function which will update the position of the rover 
    peridically based on the control 

Parameters: 
    x: A list consisting the state of the rover (x, y, yaw)
    u: Controls given to the rover
'''
def motion_model(x, u):
    # The state matrix 
    # In the demo only an identity matrix 
    F = np.array([[1.0, 0, 0],
                  [0, 1.0, 0],
                  [0, 0, 1.0]])

    # Input matrix
    B = np.array([[DT * math.cos(x[2, 0]), 0],
                  [DT * math.sin(x[2, 0]), 0],
                  [0.0, DT]])

    # Update the position of the rover based on the controls 
    # * Doesn't adjust for any noise
    x = F @ x + B @ u

    # Convert the angle into the first quadrant 
    x[2, 0] = pi_2_pi(x[2, 0])

    return x


'''
Function: pi_2_pi
    A function to convert angle into the first quadrant 

Parameters: 
    angle - The angle required to convert 
'''
def pi_2_pi(angle):
    return (angle + math.pi) % (2 * math.pi) - math.pi